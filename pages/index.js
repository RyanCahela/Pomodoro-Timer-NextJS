import { useReducer, useEffect } from "react";
import Head from "next/head";
import TimeDisplay from "../components/TimeDisplay";

//states: IDLE, RUNNING, PAUSED
//action.types: "START", "PAUSE", "RESET"

const reducer = (state, action) => {
  switch (state.currentState) {
    case "IDLE":
      if (action.type === "RESET") {
        return { ...state };
      }

      if (action.type === "PAUSE") {
        return { ...state };
      }

      if (action.type === "START") {
        const newState = { ...state };
        newState.timerStartTime = new Date();
        newState.currentState = "RUNNING";
        return newState;
      }

      console.error(`state = ${state}, action = ${action}`);
      break;

    case "RUNNING":
      if (action.type === "START") {
        return { ...state };
      }

      if (action.type === "PAUSE") {
        return {
          ...state,
          currentState: "PAUSED",
        };
      }

      if (action.type === "RESET") {
        return {
          ...state,
          currentState: "IDLE",
          timeElapsed: 0,
        };
      }

      if (action.type === "TICK") {
        const oldState = { ...state };
        const newState = { ...state };
        newState.timeElapsed = new Date() - oldState.timerStartTime;
        return newState;
      }

      console.error(`state = ${state}, action = ${action}`);
      break;

    case "PAUSED":
      if (action.type === "PAUSE") {
        return { ...state };
      }

      if (action.type === "START") {
        return {
          ...state,
          currentState: "RUNNING",
        };
      }

      if (action.type === "RESET") {
        return {
          ...state,
          currentState: "IDLE",
          timeElapsed: 0,
        };
      }

      console.error(`state = ${state}, action = ${action}`);
      break;

    default:
      console.error("something went wrong in reducer");
  }
};

export default function Home() {
  const [state, dispatch] = useReducer(reducer, {
    currentState: "IDLE",
    timeElapsed: 0,
    timerStartTime: 0,
  });

  useEffect(() => {
    if (state.currentState === "RUNNING") {
      const intervalRef = setInterval(() => {
        console.log("tick");
        dispatch({
          type: "TICK",
        });
      }, 1);
      return () => clearTimeout(intervalRef);
    }
  }, [state]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Pomodoro Timer</h1>
      <button
        onClick={() =>
          dispatch({
            type: "START",
          })
        }>
        START
      </button>
      <button onClick={() => dispatch({ type: "PAUSE" })}>PAUSE</button>
      <button onClick={() => dispatch({ type: "RESET" })}>RESET</button>
      <TimeDisplay miliseconds={state.timeElapsed} />
    </div>
  );
}
